// js/utils/db-utils.js
import {
    Timestamp,
    deleteDoc,
    doc,
    writeBatch,
    query,
    where,
    getDocs,
    getDoc,
    serverTimestamp
} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
import { ref, deleteObject } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-storage.js";
import { db, storage, auth, COLLECTIONS } from "../services/firestore-service.js";
import { getDeleteInfo, setDeleteInfo, getUserRole } from "./cache.js";
import { showAlert, DOM_ELEMENTS } from "./dom-helpers.js";
import { deleteFile } from "../services/storage-service.js";

/**
 * Retorna a cole√ß√£o correspondente ao tipo de item.
 */
function getCollectionRef(type) {
    switch (type) {
        case 'agua': return COLLECTIONS.aguaMov;
        case 'gas': return COLLECTIONS.gasMov;
        case 'materiais': return COLLECTIONS.materiais;
        case 'unidade': return COLLECTIONS.unidades;
        case 'entrada-agua': return COLLECTIONS.estoqueAgua;
        case 'entrada-gas': return COLLECTIONS.estoqueGas;
        default:
            console.warn(`‚ö†Ô∏è Tipo de cole√ß√£o inv√°lido: ${type}`);
            return null;
    }
}

/**
 * Executa a exclus√£o de um documento (chamado pelo modal de confirma√ß√£o).
 */
async function executeDelete() {
    const info = getDeleteInfo();
    const role = getUserRole();

    if (!auth.currentUser) {
        showAlert(info.alertElementId || 'alert-gestao', 'Erro: usu√°rio n√£o autenticado.', 'error');
        return;
    }

    if (!['admin', 'editor'].includes(role)) {
        showAlert(info.alertElementId || 'alert-gestao', 'Voc√™ n√£o tem permiss√£o para excluir este item.', 'warning');
        return;
    }

    if (!info.id || !info.type) {
        showAlert(info.alertElementId || 'alert-gestao', 'Erro: informa√ß√µes de exclus√£o incompletas.', 'error');
        return;
    }

    // Configura o estado do modal
    if (DOM_ELEMENTS.btnConfirmDelete && DOM_ELEMENTS.btnCancelDelete) {
        DOM_ELEMENTS.btnConfirmDelete.disabled = true;
        DOM_ELEMENTS.btnConfirmDelete.innerHTML = '<div class="loading-spinner-small mx-auto" style="width:18px; height:18px;"></div>';
        DOM_ELEMENTS.btnCancelDelete.disabled = true;
    }

    const collectionRef = getCollectionRef(info.type);
    if (!collectionRef) {
        console.error(`Erro: tipo de cole√ß√£o inv√°lido (${info.type})`);
        showAlert(info.alertElementId || 'alert-gestao', 'Erro interno: tipo de cole√ß√£o desconhecido.', 'error');
        return;
    }

    try {
        // Exclus√£o de arquivo no Storage, se aplic√°vel
        if (info.type === 'materiais') {
            const materialDoc = await getDoc(doc(collectionRef, info.id));
            if (materialDoc.exists()) {
                const storagePath = materialDoc.data().storagePath;
                if (storagePath) {
                    await deleteFile(storagePath);
                    console.log(`üóëÔ∏è Arquivo removido do storage: ${storagePath}`);
                }
            }
        }

        // Exclus√£o do documento principal
        await deleteDoc(doc(collectionRef, info.id));

        if (info.type === 'unidade') {
            await deleteUnitHistory(info.id);
            showAlert(info.alertElementId || 'alert-gestao', `Unidade "${info.details}" e hist√≥rico removidos!`, 'success');
        } else {
            const msg = info.isInicial
                ? 'Lan√ßamento de Estoque Inicial removido!'
                : 'Lan√ßamento removido com sucesso!';
            showAlert(info.alertElementId || 'alert-gestao', msg, 'success');
        }

    } catch (error) {
        console.error(`Erro ao remover ${info.type}:`, error);
        showAlert(info.alertElementId || 'alert-gestao', `Erro ao remover: ${error.message}`, 'error');
    } finally {
        if (DOM_ELEMENTS.confirmDeleteModal) DOM_ELEMENTS.confirmDeleteModal.style.display = 'none';
        if (DOM_ELEMENTS.btnConfirmDelete && DOM_ELEMENTS.btnCancelDelete) {
            DOM_ELEMENTS.btnConfirmDelete.disabled = false;
            DOM_ELEMENTS.btnConfirmDelete.textContent = 'Confirmar Exclus√£o';
            DOM_ELEMENTS.btnCancelDelete.disabled = false;
        }

        setDeleteInfo({
            id: null,
            type: null,
            collectionRef: null,
            alertElementId: null,
            details: null,
            isInicial: false
        });
    }
}

/**
 * Remove todas as movimenta√ß√µes associadas a uma unidade.
 */
async function deleteUnitHistory(unidadeId) {
    if (!unidadeId || !auth.currentUser) return;
    console.log(`üßπ Limpando hist√≥rico da unidade ID: ${unidadeId}`);

    const batch = writeBatch(db);
    let total = 0;

    try {
        const collections = [
            { ref: COLLECTIONS.aguaMov, name: 'movimenta√ß√µes de √°gua' },
            { ref: COLLECTIONS.gasMov, name: 'movimenta√ß√µes de g√°s' },
            { ref: COLLECTIONS.materiais, name: 'materiais' }
        ];

        for (const { ref, name } of collections) {
            const q = query(ref, where("unidadeId", "==", unidadeId));
            const snapshot = await getDocs(q);
            snapshot.forEach(docSnap => {
                batch.delete(docSnap.ref);
                total++;
            });
            console.log(` - ${snapshot.size} ${name} encontradas para exclus√£o.`);
        }

        if (total > 0) {
            await batch.commit();
            console.log(`‚úÖ Hist√≥rico da unidade ${unidadeId} removido (${total} docs).`);
        } else {
            console.log(`‚ÑπÔ∏è Nenhum hist√≥rico encontrado para ${unidadeId}.`);
        }

    } catch (error) {
        console.error(`Erro ao limpar hist√≥rico da unidade ${unidadeId}:`, error);
        showAlert('alert-gestao',
            `Erro ao limpar o hist√≥rico da unidade: ${error.message}. A unidade foi removida, mas o hist√≥rico pode permanecer.`,
            'error', 10000);
    }
}

export { executeDelete, getCollectionRef };
